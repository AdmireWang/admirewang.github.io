import{_ as s,c as i,o as a,a1 as e}from"./chunks/framework.CrMo2NI9.js";const n="/golang/assets/image-20200906202108891.DlMLd6yX.png",E=JSON.parse('{"title":"Go的依赖管理Go Module","description":"","frontmatter":{},"headers":[],"relativePath":"Golang进阶/15_Go的依赖管理GoModule/README.md","filePath":"Golang进阶/15_Go的依赖管理GoModule/README.md"}'),t={name:"Golang进阶/15_Go的依赖管理GoModule/README.md"},l=e('<h1 id="go的依赖管理go-module" tabindex="-1">Go的依赖管理Go Module <a class="header-anchor" href="#go的依赖管理go-module" aria-label="Permalink to &quot;Go的依赖管理Go Module&quot;">​</a></h1><h2 id="来源" tabindex="-1">来源 <a class="header-anchor" href="#来源" aria-label="Permalink to &quot;来源&quot;">​</a></h2><p><a href="https://www.liwenzhou.com/posts/Go/go_dependency/" target="_blank" rel="noreferrer">https://www.liwenzhou.com/posts/Go/go_dependency/</a></p><h2 id="历史遗留问题" tabindex="-1">历史遗留问题 <a class="header-anchor" href="#历史遗留问题" aria-label="Permalink to &quot;历史遗留问题&quot;">​</a></h2><p>如果是使用Go1.11和Go1.12版本，需要手动开启Go module支持</p><p><img src="'+n+`" alt="image-20200906202108891"></p><h2 id="为什么需要依赖管理" tabindex="-1">为什么需要依赖管理 <a class="header-anchor" href="#为什么需要依赖管理" aria-label="Permalink to &quot;为什么需要依赖管理&quot;">​</a></h2><p>最早的时候，Go所依赖的所有的第三方库都放在GOPATH这个目录下面。这就导致了同一个库只能保存一个版本的代码。如果不同的项目依赖同一个第三方的库的不同版本，应该怎么解决？</p><h2 id="godep" tabindex="-1">godep <a class="header-anchor" href="#godep" aria-label="Permalink to &quot;godep&quot;">​</a></h2><p>Go语言从v1.5开始开始引入<code>vendor</code>模式，如果项目目录下有vendor目录，那么go工具链会优先使用<code>vendor</code>内的包进行编译、测试等。</p><p><code>godep</code>是一个通过vender模式实现的Go语言的第三方依赖管理工具，类似的还有由社区维护准官方包管理工具<code>dep</code>。</p><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><p>执行以下命令安装<code>godep</code>工具。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">go</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> get github.com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tools</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">godep</span></span></code></pre></div><h3 id="基本命令" tabindex="-1">基本命令 <a class="header-anchor" href="#基本命令" aria-label="Permalink to &quot;基本命令&quot;">​</a></h3><p>安装好godep之后，在终端输入<code>godep</code>查看支持的所有命令。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">godep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> save</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     将依赖项输出并复制到Godeps.json文件中</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">godep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       使用保存的依赖项运行go工具</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">godep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      下载并安装具有指定依赖项的包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">godep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> path</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     打印依赖的GOPATH路径</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">godep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restore</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  在GOPATH中拉取依赖的版本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">godep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   更新选定的包或go版本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">godep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> diff</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     显示当前和以前保存的依赖项集之间的差异</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">godep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> version</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  查看版本信息</span></span></code></pre></div><p>使用<code>godep help [command]</code>可以看看具体命令的帮助信息。</p><h3 id="使用godep" tabindex="-1">使用godep <a class="header-anchor" href="#使用godep" aria-label="Permalink to &quot;使用godep&quot;">​</a></h3><p>在项目目录下执行<code>godep save</code>命令，会在当前项目中创建<code>Godeps</code>和<code>vender</code>两个文件夹。</p><p>其中<code>Godeps</code>文件夹下有一个<code>Godeps.json</code>的文件，里面记录了项目所依赖的包信息。 <code>vender</code>文件夹下是项目依赖的包的源代码文件。</p><h3 id="vender机制" tabindex="-1">vender机制 <a class="header-anchor" href="#vender机制" aria-label="Permalink to &quot;vender机制&quot;">​</a></h3><p>Go1.5版本之后开始支持，能够控制Go语言程序编译时依赖包搜索路径的优先级。</p><p>例如查找项目的某个依赖包，首先会在项目根目录下的<code>vender</code>文件夹中查找，如果没有找到就会去<code>$GOAPTH/src</code>目录下查找。</p><h3 id="godep开发流程" tabindex="-1">godep开发流程 <a class="header-anchor" href="#godep开发流程" aria-label="Permalink to &quot;godep开发流程&quot;">​</a></h3><ol><li>保证程序能够正常编译</li><li>执行<code>godep save</code>保存当前项目的所有第三方依赖的版本信息和代码</li><li>提交Godeps目录和vender目录到代码库。</li><li>如果要更新依赖的版本，可以直接修改<code>Godeps.json</code>文件中的对应项</li></ol><h2 id="go-module" tabindex="-1">go module <a class="header-anchor" href="#go-module" aria-label="Permalink to &quot;go module&quot;">​</a></h2><p><code>go module</code>是Go1.11版本之后官方推出的版本管理工具，并且从Go1.13版本开始，<code>go module</code>将是Go语言默认的依赖管理工具。</p><h3 id="go111module" tabindex="-1">GO111MODULE <a class="header-anchor" href="#go111module" aria-label="Permalink to &quot;GO111MODULE&quot;">​</a></h3><p>要启用<code>go module</code>支持首先要设置环境变量<code>GO111MODULE</code>，通过它可以开启或关闭模块支持，它有三个可选值：<code>off</code>、<code>on</code>、<code>auto</code>，默认值是<code>auto</code>。</p><ol><li><code>GO111MODULE=off</code>禁用模块支持，编译时会从<code>GOPATH</code>和<code>vendor</code>文件夹中查找包。</li><li><code>GO111MODULE=on</code>启用模块支持，编译时会忽略<code>GOPATH</code>和<code>vendor</code>文件夹，只根据 <code>go.mod</code>下载依赖。</li><li><code>GO111MODULE=auto</code>，当项目在<code>$GOPATH/src</code>外且项目根目录有<code>go.mod</code>文件时，开启模块支持。</li></ol><p>简单来说，设置<code>GO111MODULE=on</code>之后就可以使用<code>go module</code>了，以后就没有必要在GOPATH中创建项目了，并且还能够很好的管理项目依赖的第三方包信息。</p><p>使用 go module 管理依赖后会在项目根目录下生成两个文件<code>go.mod</code>和<code>go.sum</code>。</p><h3 id="goproxy" tabindex="-1">GOPROXY <a class="header-anchor" href="#goproxy" aria-label="Permalink to &quot;GOPROXY&quot;">​</a></h3><p>Go1.11之后设置GOPROXY命令为：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GOPROXY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">https://goproxy.cn</span></span></code></pre></div><p>Go1.13之后<code>GOPROXY</code>默认值为<code>https://proxy.golang.org</code>，在国内是无法访问的，所以十分建议大家设置GOPROXY，这里我推荐使用<a href="https://studygolang.com/topics/10014" target="_blank" rel="noreferrer">goproxy.cn</a>。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GOPROXY=https://goproxy.cn,direct</span></span></code></pre></div><h3 id="go-mod命令" tabindex="-1">go mod命令 <a class="header-anchor" href="#go-mod命令" aria-label="Permalink to &quot;go mod命令&quot;">​</a></h3><p>常用的<code>go mod</code>命令如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>go mod download    下载依赖的module到本地cache（默认为$GOPATH/pkg/mod目录）</span></span>
<span class="line"><span>go mod edit        编辑go.mod文件</span></span>
<span class="line"><span>go mod graph       打印模块依赖图</span></span>
<span class="line"><span>go mod init        初始化当前文件夹, 创建go.mod文件</span></span>
<span class="line"><span>go mod tidy        增加缺少的module，删除无用的module</span></span>
<span class="line"><span>go mod vendor      将依赖复制到vendor下</span></span>
<span class="line"><span>go mod verify      校验依赖</span></span>
<span class="line"><span>go mod why         解释为什么需要依赖</span></span></code></pre></div><h3 id="go-mod" tabindex="-1">go.mod <a class="header-anchor" href="#go-mod" aria-label="Permalink to &quot;go.mod&quot;">​</a></h3><p>go.mod文件记录了项目所有的依赖信息，其结构大致如下：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> github.com/Q1mi/studygo/blogger</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.12</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	github.com/DeanThompson/ginpprof</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v0.0.0-20190408063150-3be636683586</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	github.com/gin-gonic/gin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1.4.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	github.com/go-sql-driver/mysql</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1.4.1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	github.com/jmoiron/sqlx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1.2.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	github.com/satori/go.uuid</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1.2.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	google.golang.org/appengine</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1.6.1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> indirect</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>其中，</p><ul><li><code>module</code>用来定义包名</li><li><code>require</code>用来定义依赖包及版本</li><li><code>indirect</code>表示间接引用</li></ul><h4 id="依赖的版本" tabindex="-1">依赖的版本 <a class="header-anchor" href="#依赖的版本" aria-label="Permalink to &quot;依赖的版本&quot;">​</a></h4><p>go mod支持语义化版本号，比如<code>go get foo@v1.2.3</code>，也可以跟git的分支或tag，比如<code>go get foo@master</code>，当然也可以跟git提交哈希，比如<code>go get foo@e3702bed2</code>。关于依赖的版本支持以下几种格式：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gopkg.in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tomb.v1 v1.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20141024135613</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dd632973f1e7</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gopkg.in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vmihailenco</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">msgpack.v2 v2.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9.1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gopkg.in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yaml.v2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v2.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">github.com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tatsushid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/go-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fastping v0.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20160109021039</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d7bb493dee3e</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">latest</span></span></code></pre></div><h4 id="replace" tabindex="-1">replace <a class="header-anchor" href="#replace" aria-label="Permalink to &quot;replace&quot;">​</a></h4><p>在国内访问golang.org/x的各个包都需要翻墙，你可以在go.mod中使用replace替换成github上对应的库。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">replace (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	golang.org</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">crypto v0.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20180820150726</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">614d502a4dac</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> github.com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">golang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">crypto v0.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20180820150726</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">614d502a4dac</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	golang.org</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">net v0.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20180821023952</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">922f4815f713</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> github.com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">golang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">net v0.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20180826012351</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">8a410e7b638d</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	golang.org</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">text v0.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> github.com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">golang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">text v0.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="go-get" tabindex="-1">go get <a class="header-anchor" href="#go-get" aria-label="Permalink to &quot;go get&quot;">​</a></h3><p>在项目中执行<code>go get</code>命令可以下载依赖包，并且还可以指定下载的版本。</p><ol><li>运行<code>go get -u</code>将会升级到最新的次要版本或者修订版本(x.y.z, z是修订版本号， y是次要版本号)</li><li>运行<code>go get -u=patch</code>将会升级到最新的修订版本</li><li>运行<code>go get package@version</code>将会升级到指定的版本号version</li></ol><p>如果下载所有依赖可以使用<code>go mod download</code>命令。</p><h3 id="整理依赖" tabindex="-1">整理依赖 <a class="header-anchor" href="#整理依赖" aria-label="Permalink to &quot;整理依赖&quot;">​</a></h3><p>我们在代码中删除依赖代码后，相关的依赖库并不会在<code>go.mod</code>文件中自动移除。这种情况下我们可以使用<code>go mod tidy</code>命令更新<code>go.mod</code>中的依赖关系。</p><h3 id="go-mod-edit" tabindex="-1">go mod edit <a class="header-anchor" href="#go-mod-edit" aria-label="Permalink to &quot;go mod edit&quot;">​</a></h3><h4 id="格式化" tabindex="-1">格式化 <a class="header-anchor" href="#格式化" aria-label="Permalink to &quot;格式化&quot;">​</a></h4><p>因为我们可以手动修改go.mod文件，所以有些时候需要格式化该文件。Go提供了一下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> edit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -fmt</span></span></code></pre></div><h4 id="添加依赖项" tabindex="-1">添加依赖项 <a class="header-anchor" href="#添加依赖项" aria-label="Permalink to &quot;添加依赖项&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> edit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -require=golang.org/x/text</span></span></code></pre></div><h4 id="移除依赖项" tabindex="-1">移除依赖项 <a class="header-anchor" href="#移除依赖项" aria-label="Permalink to &quot;移除依赖项&quot;">​</a></h4><p>如果只是想修改<code>go.mod</code>文件中的内容，那么可以运行<code>go mod edit -droprequire=package path</code>，比如要在<code>go.mod</code>中移除<code>golang.org/x/text</code>包，可以使用如下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> edit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -droprequire=golang.org/x/text</span></span></code></pre></div><p>关于<code>go mod edit</code>的更多用法可以通过<code>go help mod edit</code>查看。</p><h2 id="在项目中使用go-module" tabindex="-1">在项目中使用go module <a class="header-anchor" href="#在项目中使用go-module" aria-label="Permalink to &quot;在项目中使用go module&quot;">​</a></h2><h3 id="既有项目" tabindex="-1">既有项目 <a class="header-anchor" href="#既有项目" aria-label="Permalink to &quot;既有项目&quot;">​</a></h3><p>如果需要对一个已经存在的项目启用<code>go module</code>，可以按照以下步骤操作：</p><ol><li>在项目目录下执行<code>go mod init</code>，生成一个<code>go.mod</code>文件。</li><li>执行<code>go get</code>，查找并记录当前项目的依赖，同时生成一个<code>go.sum</code>记录每个依赖库的版本和哈希值。</li></ol><h3 id="新项目" tabindex="-1">新项目 <a class="header-anchor" href="#新项目" aria-label="Permalink to &quot;新项目&quot;">​</a></h3><p>对于一个新创建的项目，我们可以在项目文件夹下按照以下步骤操作：</p><ol><li>执行<code>go mod init 项目名</code>命令，在当前项目文件夹下创建一个<code>go.mod</code>文件。</li><li>手动编辑<code>go.mod</code>中的require依赖项或执行<code>go get</code>自动发现、维护依赖。</li></ol>`,75),h=[l];function o(p,d,k,g,r,c){return a(),i("div",null,h)}const y=s(t,[["render",o]]);export{E as __pageData,y as default};
